<?php
// $Id$

require_once(drupal_get_path('module', 'word_list_captcha') . '/../text_captcha.inc');

define('WORD_LIST_CAPTCHA_WORD_POOL1', 'green red blue yellow black white magenta cyan orange violet pruple gold brown pink');
define('WORD_LIST_CAPTCHA_WORD_POOL2', 'bird elephant dog cat crocodile lion fish cow horse sheep frog beetle worm spider bat giraffe lizard goat monkey rabbit chimpanzee');

/**
 * Implementation of hook_menu().
 */
function word_list_captcha_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    // add an administration tab for phrase_captcha
    $items[] = array(
      'path' => 'admin/user/captcha/word_list_captcha',
      'title' => t('Word list captcha'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('word_list_captcha_settings_form'),
      'access' => user_access('administer captcha'),
      'type' => MENU_LOCAL_TASK,
    );
  }
  return $items;
}

/**
 * Helper function for getting the words from a pool
 */
function _word_list_captcha_get_words($pool, $explode=FALSE) {
  switch ((int)$pool){
    case 1:
      $words = variable_get('word_list_captcha_word_pool_1', WORD_LIST_CAPTCHA_WORD_POOL1);
      break;
    case 2:
      $words = variable_get('word_list_captcha_word_pool_2', WORD_LIST_CAPTCHA_WORD_POOL2);
      break;
    default:
      drupal_set_message('no word pool available', 'error');
      $words = '';
      break;
  }
  if ($explode) {
    $words = _text_captcha_whitespace_explode($words);
  }
  return $words;
}

/**
 * Function for the settings form
 */
function word_list_captcha_settings_form() {
  $form = array();
  $form['word_list_captcha_word_pool_1'] = array(
    '#type' => 'textarea',
    '#title' => t('Word pool @num', array('@num' => 1)),
    '#default_value' => _word_list_captcha_get_words(1, FALSE),
    '#rows' => 2,
  );
  $form['word_list_captcha_word_pool_2'] = array(
    '#type' => 'textarea',
    '#title' => t('Word pool @num', array('@num' => 2)),
    '#default_value' => _word_list_captcha_get_words(2, FALSE),
    '#rows' => 2,
  );
  $form['word_list_captcha_list_size'] = array(
    '#type' => 'select',
    '#title' => t('Number of words in list'),
    '#default_value' => variable_get('word_list_captcha_list_size', 4),
    '#description' => t('Select how many word lists should be in the challenge.'),
    '#options' => array(3=>3, 4=>4, 5=>5, 6=>6, 7=>7, 8=>8, 9=>9, 10=>10),
  );
  // add buttons and return
  return system_settings_form($form);
}

/**
 * Validation function for the settings form
 */
function word_list_captcha_settings_form_validate($form_id, $form_values) {
  if ($form_id == 'word_list_captcha_settings_form') {
    // check the number of words in the pools
    $list_size = (int) variable_get('word_list_captcha_list_size', 4);
    for ($i = 1; $i <= 2; $i++) {
      $words = _text_captcha_whitespace_explode($form_values["word_list_captcha_word_pool_$i"]);
      if (count($words) < $list_size) {
        form_set_error("word_list_captcha_word_pool_$i", t('You should provide at least @num words', array('@num' => $list_size)));
      }
    }
  }
}

/**
 * helper function for generating a word list captcha
 */
function _word_list_captcha_get_word_list_captcha($list_size) {
  if (mt_rand(0,1)) {
    $words_right = _word_list_captcha_get_words(1, TRUE);
    $words_wrong = _word_list_captcha_get_words(2, TRUE);
  }
  else {
    $words_right = _word_list_captcha_get_words(2, TRUE);
    $words_wrong = _word_list_captcha_get_words(1, TRUE);
  }
  shuffle($words_right);
  $word_list = array_slice($words_right, 0, $list_size - 1);
  $wrong_word = $words_wrong[array_rand($words_wrong)];
  $word_list[] = $wrong_word;
  shuffle($word_list);
  return array($word_list, $wrong_word);
}

/**
 * Implementation of hook_captcha().
 */
function word_list_captcha_captcha($op, $captcha_type='', $post_data=array()) {
  switch($op) {
    case 'list':
      return array('Word list captcha');
      break;
    case 'generate':
      if ($captcha_type == 'Word list captcha') {
        $list_size = (int) variable_get('word_list_captcha_list_size', 4);
        list($word_list, $wrong_word) = _word_list_captcha_get_word_list_captcha($list_size);
        $captcha = array();
        $captcha['solution'] = $wrong_word;
        $captcha['form']['captcha_response'] = array (
          '#type' => 'radios',
          '#title' => t('Which word does not belong to the list?'),
          '#options' => array_combine($word_list, $word_list),
          // extra class needed for additional CSS'ing of the options
          '#attributes' => array('class' => 'word_list_captcha_radios'),
          // The following entry '#DANGEROUS_SKIP_CHECK' is needed to prevent
          // that Drupal checks during validation phase if a submitted option
          // is in the list of possible options. (see includes/form.inc)
          // The options are randomly generated on each call and consequently
          // almost never the same during the generate phase and the validation
          // phase.
          '#DANGEROUS_SKIP_CHECK' => TRUE, //
        );
        // additional CSS rules for the word list
        drupal_add_css(drupal_get_path('module', 'word_list_captcha') . '/word_list_captcha.css');
        $captcha['preprocess'] = FALSE;
        return $captcha;
      }
      break;
  }
}
